# CHANGES TO THE UML

### Player

-   `player->pickupGold` can just take an amount, no need to pass `Treasure`
-   Gold should be stored as electrum (0.5 gold each), so orcs can easily collect in 1/2 increments
-   `player->pickupSuit` needs no arguments, the suit will just call it when it's picked up, and now the player is suited
-   `player->infoPannel` displays current information about the player to an ostream

### Retrievable

-   `onRetrieve` should return a bool, to denote whether the item was successfully retrieved. If it was, it should be removed from the board, otherwise it should persist

### Enemy

-   New protected method `Enemy::walk` for more code re-use
-   Enemy does not return a string, instead enum elements for cardinal directions or attack
-   `beAttacked` is virtual so `Dragon` can override it and "unlock" the protected item when it dies
-   `goldValue()` that returns how much gold a particular enemy is worth, so dragons and merchants can be worth 0
-   Adding `age` so multi updates don't happen
-   Splitting Enemy::update into Enemy::update and Enemy::act, so act can be overridden

### Dragon

-   Override `beAttacked` to "unlock" its protected item when it dies

### Treasure

-   Returns 'G' not 'B'

### Tile

-   Overload for output stream operator
-   Added chamber ID
-   Added separate `movablePlayer` method

### Compass

-   When the `Compass` is retrieved, the player doesn't need to know, the board does.
    -   We can still call `onRetrieve(Player)`, but the constructor needs a `Board&` so it can alert the board on pickup
-   Compass is owned by an enemy

### General

-   "Defense" was chosen as standard, was mis-spelled in `Character`

### Game

-   `Board` is a friend class of `Game`
-   `Game` needs a private method `nextLevel`
-   `render` becomes `update`, a private method to update board, render board, then render bottom text
-   `render` is needed to render without side-effects (initial display)
-   Added a pointer to `Player`
-   All player interaction functions should return whether the player is still alive
-   Added private static helper method `randomPopulateMap`
-   Added private static helper method `labelChambers`
-   Added private static helper method `traverseChamber`
-   Added field `shouldGenerate`

### Dragon Protected
-

### Board

-   playerLocation is also useful for enemies checking whether they can attack the player, open it up as read only through a method `std::pair<int, int> getPlayerLoc()`
-   Need to add an `Update()` function which updates all enemies on the board
-   Needs a private helper function to find the tile offset by a `CardinalDirection` from a particular x, y coordinate
-   Adding `stairLocation()` so enemies can know to avoid stepping on the stairs
-   Added private vector of sets of coordinate pairs `chambers`

### Player

-   Fields `suited`, `attackMod`, `defenseMod`, and `gold` are protected instead of private
-   Methods `playerMove`, `playerAttack`, and `playerPickup` return a boolean, indicating if the player is still alive after that move
-   Storing electrum instead of gold to avoid integer division
-   Need getters for `health`, `attack`, `defense`, and `electrum`.
-   Needs custom attack functions

### Character

-   `Player`s don't care about board, only `Enemy`, so move `Board&` to `Enemy`
-   Add `getDefense` and change getPower to getAttack so the player can override to use attack/defense mod

### Potion

-   Needs a self description of what type of potion it is
